// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WakeCap.DAL;

#nullable disable

namespace WakeCap.DAL.Migrations
{
    [DbContext(typeof(WakeCapDbContext))]
    [Migration("20250508104439_InitialCreation")]
    partial class InitialCreation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WakeCap.DAL.Entities.UploadLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ErrorDetailsJson")
                        .HasColumnType("text");

                    b.Property<int>("ErrorRows")
                        .HasColumnType("integer")
                        .HasColumnName("error_rows");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<int>("TotalRows")
                        .HasColumnType("integer")
                        .HasColumnName("total_rows");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ValidRows")
                        .HasColumnType("integer")
                        .HasColumnName("valid_rows");

                    b.HasKey("Id");

                    b.HasIndex("UploadedAt");

                    b.ToTable("upload_log", (string)null);
                });

            modelBuilder.Entity("WakeCap.DAL.Entities.Worker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("worker", (string)null);
                });

            modelBuilder.Entity("WakeCap.DAL.Entities.WorkerZoneAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("date")
                        .HasColumnName("effective_date");

                    b.Property<int>("WorkerId")
                        .HasColumnType("integer")
                        .HasColumnName("worker_id");

                    b.Property<int>("ZoneId")
                        .HasColumnType("integer")
                        .HasColumnName("zone_id");

                    b.HasKey("Id");

                    b.HasIndex("ZoneId");

                    b.HasIndex("WorkerId", "ZoneId", "EffectiveDate")
                        .IsUnique();

                    b.ToTable("worker_zone_assignment", (string)null);
                });

            modelBuilder.Entity("WakeCap.DAL.Entities.Zone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("zone", (string)null);
                });

            modelBuilder.Entity("WakeCap.DAL.Entities.WorkerZoneAssignment", b =>
                {
                    b.HasOne("WakeCap.DAL.Entities.Worker", "Worker")
                        .WithMany("Assignments")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WakeCap.DAL.Entities.Zone", "Zone")
                        .WithMany("Assignments")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Worker");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("WakeCap.DAL.Entities.Worker", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("WakeCap.DAL.Entities.Zone", b =>
                {
                    b.Navigation("Assignments");
                });
#pragma warning restore 612, 618
        }
    }
}
